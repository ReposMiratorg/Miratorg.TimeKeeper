
<CustomModalDialog DialogSize="ModalDialogSize.Standard" @ref="modalDialog">

    <FrontObject>
        <div style="display:flex; flex-direction:column; width: 190px; height: 60px; background-color: #ced4da" @onclick="modalDialog.Open">

            <PlanRecordComponent CurrentDate="currentDate" PlanedIntervals="planedIntervals" />

            <FactComponent CurrentDate="currentDate" Schedule1CPlans="schedule1CPlanModels" />

            <div style="display: flex; width: 100%; height:50px;">
            </div>

        </div>
    </FrontObject>

    <Body>
        <a>@Message 123124</a>
    </Body>

    <Footer>
        <button class="btn btn-danger btn-sm" @onclick="Delete">Удалить</button>
        <button class="btn btn-info btn-sm" @onclick="Close">Отмена</button>
    </Footer>

</CustomModalDialog>


@code {

    [Parameter]
    public string Message { get; set; }

    [Parameter]
    public EventCallback Action { get; set; }

    private CustomModalDialog modalDialog { get; set; } = new();

    private async Task Close()
    {
        await modalDialog.Close();
    }

    private async Task Delete()
    {
        if (!Action.HasDelegate)
        {
            return;
        }

        try
        {
            await Action.InvokeAsync();
        }
        catch (Exception)
        {
            //ToDo - записать лог и отобразить сообщение
        }
    }

    [Parameter]
    public DayEnum WeekDay { get; set; }

    [Parameter]
    public DateTime WeekBeginDay { get; set; }

    [Parameter]
    public Guid EmployeeId { get; set; }

    [Parameter]
    public List<EmployeeModel> EmployeeModels { get; set; }

    private DateTime currentDate { get; set; }

    private List<DateDetailModel> planedIntervals { get; set; }
    private List<DateDetailModel> overworkIntervals { get; set; }
    private List<Schedule1CPlanModel> schedule1CPlanModels { get; set; }

    protected override void OnParametersSet()
    {
        currentDate = WeekBeginDay.AddDays((int)WeekDay);

        var dates = EmployeeModels.Where(x => x.EmployeeId == EmployeeId).SelectMany(x => x.Dates);
        planedIntervals = dates.Where(x => x.Begin >= currentDate && x.End <= currentDate && x.PlanType == PlanType.Plan).ToList();
        overworkIntervals = dates.Where(x => x.Begin >= currentDate && x.End <= currentDate && x.PlanType == PlanType.Overwork).ToList();

        var schedules = EmployeeModels.Where(x => x.EmployeeId == EmployeeId).SelectMany(x => x.WorkDates);
        schedule1CPlanModels = schedules.Where(x => x.Begin.Date == currentDate).ToList();
    }
}
