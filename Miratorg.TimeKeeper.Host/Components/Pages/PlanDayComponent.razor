
<CustomModalDialog DialogSize="ModalDialogSize.Large" @ref="modalDialog">

    <FrontObject>
        <CascadingValue Name="CurrentDate" Value="currentDate">
            <div style="display:flex; flex-direction:column; align-items: flex-start; width: 190px; height: 70px; background-color: #ced4da" @onclick="Open">

                @if(IsShowPlan)
                {
                    <PlanRecordComponent PlanedIntervals="planedIntervals" />
                }

                @if (IsShowOverWork)
                {
                    <OveWorkRecordComponent OverWorkPlanedIntervals="overworkIntervals" />
                }

                @if (IsShow1C)
                {
                    <FactComponent Schedule1CPlans="schedule1CPlanModels" />
                }

                @if (IsShowScud)
                {
                    <ScudComponent ScudInfoModels="scudInfoModels" PlanedIntervals="planedIntervals" OverWorkPlanedIntervals="overworkIntervals" />
                }

                @if (IsShowReasonAbsent)
                {
                    <ReasonAbcentComponent ReasonAbsent="@risonAbsent" />
                }

            </div>
        </CascadingValue>
    </FrontObject>

    <Body>
        @if (BlockingConfig.ChechAccess(Day))
        {
            <div class="row mb-2">
                <div class="col">
                    <CreatePlanDialogComponent Action="UdateUIAction" LimitPlanHours="LimitPlanHours" PlanHours="PlanHours" CurrentDate="currentDate" EmployeeId="EmployeeId" StoreId="StoreId" />
                </div>
                <div class="col">

                    <AuthorizeView Roles="UserHr,UserRy,Supermarkets">
                        <Authorized>
                            <CreateManualScudDialog Action="UdateUIAction" CurrentDate="currentDate" EmoloyeeId="EmployeeId" />
                        </Authorized>
                    </AuthorizeView>
                </div>
            </div>
        }
        else
        {
            <div class="row mb-2">
                <div class="col"><a>Изменения запрещены</a></div>
            </div>
        }
        <div class="row mt-2">

            <div class="col-12">

                @if (planedIntervals != null)
                {
                    var unitedEntities = planedIntervals.GroupBy(x => x.Id).ToList();

                    foreach (var item in unitedEntities)
                    {
                        var minTime = item.Min(x => x.OriginalBegin);
                        var mxnTime = item.Max(x => x.OriginalEnd);
                        var calcWorkTime = item.Sum(x => x.CaclWorkTimeMinutes);
                        var caclObed = item.Sum(x => x.PlanObedTimeMinutes);

                        var message = $"{minTime.ToShortTimeString()} - {mxnTime.ToShortTimeString()} План";
                        message += $"         ({calcWorkTime.ToString()} мин. + {caclObed.ToString()} обед)";

                        <div class="row">
                            <div class="col-10">
                                <input class="form-control form-control-sm" value="@message" disabled />
                            </div>
                            <div class="col-2">
                                @if (BlockingConfig.ChechAccess(Day))
                                {
                                    <CustomDeleteDialogComponent Message="@message" Day="currentDate" Action="@(() => RemovePaln(item.Key))" />
                                }
                                else
                                {
                                    <button class="btn btn-secondary btn-sm"><span class="mdi mdi-delete" disabled></span></button>
                                }
                            </div>
                        </div>
                    }

                   @*  foreach (var plan in planedIntervals)
                    {
                        var message = $"{plan.OriginalBegin.ToShortTimeString()} - {plan.OriginalEnd.ToShortTimeString()} План";
                        message += $"         ({plan.CaclWorkTimeMinutes.ToString()} мин. + {plan.PlanObedTimeMinutes.ToString()} обед)";

                        <div class="row">
                            <div class="col-10">
                                <input class="form-control form-control-sm" value="@message" disabled />
                            </div>
                            <div class="col-2">
                                <CustomDeleteDialogComponent Message="@message" Action="@(() => RemovePaln(plan.Id))" />
                            </div>
                        </div>
                    } *@
                }

                @if (overworkIntervals != null)
                {
                    foreach (var plan in overworkIntervals)
                    {
                        var message = $"{plan.OriginalBegin.ToShortTimeString()} - {plan.OriginalEnd.ToShortTimeString()} Подработка: {plan.WorkTime}";
                        message += $"         ({plan.CaclWorkTimeMinutes.ToString()} мин. + {plan.PlanObedTimeMinutes.ToString()} обед)";
                        <div class="row mt-2">
                            <div class="col-10">
                                <input class="form-control form-control-sm" value="@message" disabled />
                            </div>
                            <div class="col-2">
                                @if (BlockingConfig.ChechAccess(Day))
                                {
                                    <CustomDeleteDialogComponent Message="@message" Day="currentDate" Action="@(() => RemovePaln(plan.Id))" />
                                }
                                else
                                {
                                    <button class="btn btn-secondary btn-sm"><span class="mdi mdi-delete" disabled></span></button>
                                }
                            </div>
                        </div>
                    }
                }

                @if(scudInfoModels != null)
                {
                    foreach (var scud in scudInfoModels)
                    {
                        var message = $"{scud.Begin.ToShortTimeString()} - {scud.End.ToShortTimeString()} СКУД";

                        message += scud.ScudInfoType == ScudInfoType.Scud ? "" : " (ручной ввод)";

                        <div class="row mt-2">
                            <div class="col-10">
                                <input class="form-control form-control-sm" value="@message" disabled />
                            </div>
                            <div class="col-2">
                                @if (scud.ScudInfoType == ScudInfoType.Manual)
                                {
                                    @if (BlockingConfig.ChechAccess(Day))
                                    {
                                        <CustomDeleteDialogComponent Message="@message" Day="currentDate" Action="@(() => RemoveManualScud(scud.Id))" />
                                    }
                                    else
                                    {
                                        <button class="btn btn-secondary btn-sm"><span class="mdi mdi-delete" disabled></span></button>
                                    }
                                }
                            </div>
                        </div>
                    }
                }
            </div>

        </div>

        <div class="row">
            <div class="col">
                <ViewScudDetailsComponent CurrentDate="currentDate" EmoloyeeId="EmployeeId" />
            </div>
        </div>
    </Body>

    <Footer>
        <button class="btn btn-primary btn-sm" @onclick="Close">Закрыть</button>
    </Footer>

</CustomModalDialog>


@code {

    [Parameter]
    public EventCallback Action { get; set; }

    [Inject]
    public IPlanService PlanService { get; set; }

    private CustomModalDialog modalDialog { get; set; } = new();

    [Inject]
    public ILogger<PlanDayComponent> Logger { get; set; }

    [Parameter]
    public Guid StoreId { get; set; }

    [Parameter]
    public DateTime Day { get; set; }

    private DayEnum weekDay { get; set; }

    [Parameter]
    public Guid EmployeeId { get; set; }

    [Parameter]
    public List<EmployeeModel> AdditionalEmployeeModels { get; set; }

    [Parameter]
    public bool IsShowPlan { get; set; }

    [Parameter]
    public bool IsShowOverWork { get; set; }

    [Parameter]
    public bool IsShow1C { get; set; }

    [Parameter]
    public bool IsShowScud { get; set; }

    [Parameter]
    public bool IsShowReasonAbsent { get; set; }

    [Parameter]
    public int LimitPlanHours { get; set; }

    [Parameter]
    public TimeSpan PlanHours { get; set; }

    [Inject]
    public IBlockingConfig BlockingConfig { get; set; }

    private DateTime currentDate { get; set; }

    private List<PlanDetailModel> planedIntervals { get; set; }
    private List<PlanDetailModel> overworkIntervals { get; set; }
    private List<Schedule1CPlanModel> schedule1CPlanModels { get; set; }
    private List<ScudInfoModel> scudInfoModels { get; set; }
    private string risonAbsent { get; set; }

    [Inject]
    public AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    string userName { get; set; }

    protected override async void OnParametersSet()
    {
        await UpdateUI();
    }

    private async Task UpdateUI()
    {
        try
        {
            currentDate = Day;
            weekDay = Helpers.WeekConverter.Convert(currentDate);

            var dates = SyncEmployeeService.Employees.Where(x => x.Id == EmployeeId).SelectMany(x => x.Plans).ToList();
            planedIntervals = dates.Where(x => x.OriginalBegin >= currentDate && x.OriginalEnd <= currentDate.AddDays(1) && x.PlanType == PlanType.Plan).ToList();
            overworkIntervals = dates.Where(x => x.OriginalBegin >= currentDate && x.OriginalEnd <= currentDate.AddDays(1) && x.PlanType == PlanType.Overwork).ToList();

            var schedules = SyncEmployeeService.Employees.Where(x => x.Id == EmployeeId).SelectMany(x => x.WorkDates);
            schedule1CPlanModels = schedules.Where(x => x.Begin.Date == currentDate).ToList();

            var scudInfos = SyncEmployeeService.Employees.Where(x => x.Id == EmployeeId).SelectMany(x => x.ScudInfos).ToList();
            scudInfoModels = scudInfos.Where(x => x.Begin.Date == currentDate).ToList();

            var reasonAbsentInfos = SyncEmployeeService.Employees.Where(x => x.Id == EmployeeId).SelectMany(x => x.Absences).ToList();
            var currentReason = reasonAbsentInfos.FirstOrDefault(x => x.RepDate == currentDate);
            risonAbsent = currentReason?.Description;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error {nameof(UpdateUI)}: EmployeeId: '{EmployeeId}'. Day: '{Day}'. '{ex.Message}'");
        }
    }

    private async Task RemovePaln(Guid id)
    {
        await PlanService.Remove(id, userName);
        await SyncEmployeeService.UpdateUser(EmployeeId);
        await UdateUIAction();

    }

    private async Task RemoveManualScud(Guid id)
    {
        await PlanService.RemoveScudManual(id, userName);
        await SyncEmployeeService.UpdateUser(EmployeeId);
        await UdateUIAction();

    }

    private async Task UdateUIAction()
    {
        try
        {
            if (Action.HasDelegate)
            {
                await Action.InvokeAsync();
            }

            await UpdateUI();

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Ошибка при обновлении текущего диалога");
        }
    }

    private async Task Open()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user?.Identity?.IsAuthenticated == true)
            {
                userName = user.Identity?.Name;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }

        await modalDialog.Open();
    }

    private async Task Close()
    {
        await modalDialog.Close();
    }

    private async Task Delete()
    {
        if (!Action.HasDelegate)
        {
            return;
        }

        try
        {
            await Action.InvokeAsync();
        }
        catch (Exception)
        {
            //ToDo - записать лог и отобразить сообщение
        }
    }
}
