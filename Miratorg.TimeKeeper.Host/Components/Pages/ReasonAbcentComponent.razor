

<div style="display: flex; position: relative; width: 100%; height:25px; ">
    @if (!string.IsNullOrEmpty(ReasonAbsent))
    {
        <div style="display: flex; position: absolute; flex-direction:row; flex-flow: row nowrap; width: 100%; height:25px;  z-index: 1; background-color:@ColorConfig.BackgroundReasonAbsent">
           <a>@ReasonAbsent</a>
        </div>
    }
    else
    {
        <div style="display: flex; position: absolute; flex-direction:row; flex-flow: row nowrap; width: 100%; height:25px;  z-index: 1;">
            <a></a>
        </div>
    }
</div>

@code {

    [Parameter]
    public string ReasonAbsent { get; set; }

    [Parameter]
    public DateTime CurrentDate { get; set; }

    // bool[] plan { get; set; } = new bool[24];

    protected override void OnParametersSet()
    {
        // SetHourValue();
    }

    // private string interval { get; set; }

    // private void SetHourValue()
    // {
    //     plan = new bool[24];
    //     interval = string.Empty;
    //     foreach (var planInterval in ScudInfoModels)
    //     {
    //         if (CurrentDate.AddDays(1) >= planInterval.Begin && CurrentDate <= planInterval.End)
    //         {
    //             interval = $"{planInterval.Begin.ToString("HH:mm")} - {planInterval.End.ToString("HH:mm")}";
    //             var date = CurrentDate;
    //             for (int i = 0; i < 24; i++)
    //             {
    //                 if (CheckInterval(date, planInterval.Begin, planInterval.End))
    //                 {
    //                     plan[i] = true;
    //                 }
    //                 else
    //                 {
    //                     plan[i] = false;
    //                 }
    //                 date = date.AddHours(1);
    //             }
    //         }
    //     }
    // }

    private bool CheckInterval(DateTime currentTime, DateTime beginInterval, DateTime? endInterval)
    {
        if (endInterval == null)
        {
            return false;
        }

        if (beginInterval <= currentTime && currentTime <= endInterval)
        {
            return true;
        }

        return false;
    }
}