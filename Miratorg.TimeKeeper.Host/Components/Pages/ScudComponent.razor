

<div style="display: flex; position: relative; width: 100%; height:25px; ">
    <div style="display: flex; position: absolute; flex-direction:row; flex-flow: row nowrap; width: 100%; height:25px;  z-index: 1">
        @for(int i = 0; i < 24; i++)
        {
            var color = string.Empty;

            if (plan[i] == false && scud[i] == true)
            {
                color = ColorConfig.BackgroundFActOverWork;
            }
            else
            {
                color = scud[i] ? @ColorConfig.BackgroundScud : @ColorConfig.BackgroundDefault;
            }

            <div style="width: 100%; background-color: @color ;"></div>
        }
       @*  @foreach (var item in scud)
        {
            var color = string.Empty;
            color = item ? @ColorConfig.BackgroundScud : @ColorConfig.BackgroundDefault;

            <div style="width: 100%; background-color: @color ;"></div>
        } *@
    </div>
    <div style="display: flex; position: absolute; flex-direction:row; flex-flow: row nowrap; justify-content: center; align-items: center;height:25px; width: 100%; z-index: 2">
        <a>@interval</a>
    </div>

</div>

@code {

    [Parameter]
    public List<ScudInfoModel> ScudInfoModels { get; set; }

    [Parameter]
    public List<PlanDetailModel> OverWorkPlanedIntervals { get; set; }

    [Parameter]
    public List<PlanDetailModel> PlanedIntervals { get; set; }

    [Parameter]
    public DateTime CurrentDate { get; set; }

    bool[] scud { get; set; } = new bool[24];
    bool[] plan { get; set; } = new bool[24];

    protected override void OnParametersSet()
    {
        SetHourValue();
    }

    private string interval { get; set; }

    private void SetHourValue()
    {
        scud = new bool[24];
        interval = string.Empty;
        foreach (var scudnterval in ScudInfoModels)
        {
            if (CurrentDate.AddDays(1) >= scudnterval.Begin && CurrentDate <= scudnterval.End)
            {
                interval = $"{scudnterval.Begin.ToString("HH:mm")} - {scudnterval.End.ToString("HH:mm")}";
                var date = CurrentDate;
                for (int i = 0; i < 24; i++)
                {
                    if (TimeKeeperConverter.CheckInterval(date, scudnterval.Begin, scudnterval.End))
                    {
                        scud[i] = true;
                    }
                    else
                    {
                        scud[i] = false;
                    }

                    foreach (var planDetailModel in PlanedIntervals)
                    {
                        var result = TimeKeeperConverter.CheckInterval(date, planDetailModel.Begin, planDetailModel.End);
                        if(result == true)
                        {
                            plan[i] = true;
                        }
                    }

                    foreach (var overwork in OverWorkPlanedIntervals)
                    {
                        var result = TimeKeeperConverter.CheckInterval(date, overwork.Begin, overwork.End);
                        if (result == true)
                        {
                            plan[i] = true;
                        }
                    }

                    date = date.AddHours(1);
                }
            }
        }
    }
}
