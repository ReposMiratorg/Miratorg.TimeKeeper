@attribute [RouteAttribute(RoutePages.SCHEDULE)]
@rendermode InteractiveServer

<div class="row mt-2 mb-3 align-items-end">
    <div class="col-3">
        <label class="">Магазин</label>
        <select class="form-select form-select-sm" value="@_selectedStore" @onchange="HandleSelectionTypeChange">
            <option value="@Guid.Empty">Выберете магазин</option>
            @foreach (var store in allStories)
            {
                <option value="@store.Id">@store.Name</option>
            }
        </select>
    </div>
    <div class="col-2">
        <label class="">Период</label>
        <input class="form-control form-control-sm" @bind-value="_date" @bind-value:event="oninput" @onchange="HandleOnChange" type="month" />
    </div>
    <div class="col-7">
        <div style="display:flex; flex-direction: row; ">
            @foreach (var weekStart in weekStarts)
            {
                <div style="display:flex; margin-right: 5px;">
                    <button class="btn btn-info btn-sm">@weekStart.ToShortDateString()</button>
                </div>
            }
        </div>
    </div>
</div>

<table>
    <tr>
        <td>Сотрудники</td>
        <td>время</td>

        <td><DayHeader WeekDay="DayEnum.Monday" WeekBeginDay="_selectedWeekBeginDay"/></td>
        <td><DayHeader WeekDay="DayEnum.Tuesday" WeekBeginDay="_selectedWeekBeginDay" /></td>
        <td><DayHeader WeekDay="DayEnum.Wednesday" WeekBeginDay="_selectedWeekBeginDay" /></td>
        <td><DayHeader WeekDay="DayEnum.Thursday" WeekBeginDay="_selectedWeekBeginDay" /></td>
        <td><DayHeader WeekDay="DayEnum.Friday" WeekBeginDay="_selectedWeekBeginDay" /></td>
        <td><DayHeader WeekDay="DayEnum.Saturday" WeekBeginDay="_selectedWeekBeginDay" /></td>
        <td><DayHeader WeekDay="DayEnum.Sunday" WeekBeginDay="_selectedWeekBeginDay" /></td>
    </tr>
    @if (allEmployees != null)
    {
        @foreach (var employee in employees)
        {
            <tr>
                <td>@employee.Name</td>
                <td></td>

                <td><PlanDayComponent WeekDay="DayEnum.Monday" WeekBeginDay="_selectedWeekBeginDay" EmployeeId="employee.Id" /></td>
                <td><PlanDayComponent WeekDay="DayEnum.Tuesday" WeekBeginDay="_selectedWeekBeginDay" EmployeeId="employee.Id" /></td>
                <td><PlanDayComponent WeekDay="DayEnum.Wednesday" WeekBeginDay="_selectedWeekBeginDay" EmployeeId="employee.Id" /></td>
                <td><PlanDayComponent WeekDay="DayEnum.Thursday" WeekBeginDay="_selectedWeekBeginDay" EmployeeId="employee.Id" /></td>
                <td><PlanDayComponent WeekDay="DayEnum.Friday" WeekBeginDay="_selectedWeekBeginDay" EmployeeId="employee.Id" /></td>
                <td><PlanDayComponent WeekDay="DayEnum.Saturday" WeekBeginDay="_selectedWeekBeginDay" EmployeeId="employee.Id" /></td>
                <td><PlanDayComponent WeekDay="DayEnum.Sunday" WeekBeginDay="_selectedWeekBeginDay" EmployeeId="employee.Id" /></td>
            </tr>
        }
    }

</table>



@code {

    [Inject]
    public ITimeKeeperDbContextFactory contextFactory { get; set; }

    private Guid _selectedStore { get; set; }
    private DateTime _date { get; set; } = DateTime.Now;
    private DateTime _selectedWeekBeginDay { get; set; }
    private List<DateTime> weekStarts { get; set; } = new List<DateTime>();


    protected override async Task OnInitializedAsync()
    {
        weekStarts.Clear();
        weekStarts = GetFirstDaysOfWeeksInMonth(_date);

        _selectedWeekBeginDay = weekStarts.FirstOrDefault();
        await Load();
    }

    private List<EmployeeEntity> allEmployees { get; set; }
    private List<StoreEntity> allStories { get; set; } = new List<StoreEntity>();

    private List<EmployeeEntity> employees { get; set; }

    private void HandleOnChange(ChangeEventArgs e)
    {
        weekStarts.Clear();
        weekStarts = GetFirstDaysOfWeeksInMonth(_date);
    }

    public static List<DateTime> GetFirstDaysOfWeeksInMonth(DateTime date)
    {
        List<DateTime> firstDaysOfWeeks = new List<DateTime>();

        // Установка даты на первый день месяца
        DateTime firstDayOfMonth = new DateTime(date.Year, date.Month, 1);

        // Вычисление первого понедельника месяца или последнего понедельника предыдущего месяца
        int daysOffset = ((int)DayOfWeek.Monday - (int)firstDayOfMonth.DayOfWeek + 7) % 7;
        DateTime firstMonday = firstDayOfMonth.AddDays(daysOffset - 7);  // Вычитаем 7, чтобы получить понедельник предыдущей недели

        // Добавление всех понедельников месяца в список, начиная с последнего понедельника предыдущего месяца
        DateTime currentMonday = firstMonday;
        while (currentMonday.Month <= date.Month)
        {
            if (currentMonday.Month == date.Month || currentMonday.AddDays(6).Month == date.Month)
            {
                firstDaysOfWeeks.Add(currentMonday);
            }
            currentMonday = currentMonday.AddDays(7);
        }

        return firstDaysOfWeeks;
    }

    private async Task SelectStory(Guid storeId)
    {
        employees = allEmployees.Where(x => x.StoreId == storeId).ToList();
    }

    private async void HandleSelectionTypeChange(ChangeEventArgs e)
    {
        if (Guid.TryParse(e.Value.ToString(), out Guid id))
        {
            await SelectStory(id);
        }
    }

    private async Task Load()
    {
        try
        {
            using var context = await contextFactory.Create();

            allEmployees = context.Employees.ToList();
            allStories = context.Stores.OrderBy(x => x.Name).ToList();

            await SelectStory(Guid.Empty);
        }
        catch(Exception ex)
        {
            
        }
    }
}
