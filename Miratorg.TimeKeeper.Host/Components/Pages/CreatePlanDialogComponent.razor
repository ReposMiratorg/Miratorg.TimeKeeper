<CustomModalDialog DialogSize="ModalDialogSize.Large" @ref="modalDialog">

    <FrontObject>
        <button class="btn btn-primary btn-sm" @onclick="Open">Добавить план/подработку</button>
    </FrontObject>

    <Body>

        <div class="row">
            <div class="col-4">
                <label>Начало</label>
                <input class="form-control form-control-sm @invalidClass" type="datetime-local" name="name" @bind="begin" />
                <div class="invalid-feedback">
                    Выберете другое время
                </div>
            </div>
            <div class="col-4">
                <label>Завершение</label>
                <input class="form-control form-control-sm @invalidClass" type="datetime-local" name="name" @bind="end" />
                <div class="invalid-feedback">
                    Выберете другое время
                </div>
            </div>
            <div class="col-4">
                <label>Тип</label>
                <select class="form-select form-select-sm" name="name" @bind="planType" >
                    <option value="@PlanType.Plan">План</option>
                    <option value="@PlanType.Overwork">Подработка</option>
                </select>
            </div>

        </div>

        <div class="row mt-3">
            @if (planType == PlanType.Overwork)
            {
                <div class="col-7">
                    <label>Магазин</label>
                    <select class="form-select form-select-sm" name="name" @bind="storeId">
                        <option value="@Guid.Empty">Не выбран</option>
                        @if (allStories != null)
                        {
                            @foreach (var store in allStories)
                            {
                                <option value="@store.Id">@store.Name</option>
                            }
                        }
                    </select>
                </div>
                <div class="col-5">
                    <label>Вид подработки (1С)</label>
                    <select class="form-select form-select-sm" name="name" @bind="typeOverWork">
                        <option value="@Guid.Empty">Не выбран</option>
                        @if (typeWorks != null)
                        {
                            @foreach (var typeWork in typeWorks)
                            {
                                <option value="@typeWork.Id">@typeWork.Name</option>
                            }
                        }
                    </select>
                </div>
            }
        </div>

        <div class="row mt-3">
            @if (planType == PlanType.Overwork)
            {
                <div class="col-7">
                    <label>Детальное описание (не для 1С)</label>
                    <select class="form-select form-select-sm" name="name" @bind="customOverwork">
                        <option value="@Guid.Empty">Не выбран</option>
                        @if (customTypeWorks != null)
                        {
                            @foreach (var typeWork in customTypeWorks)
                            {
                                <option value="@typeWork.Id">@typeWork.Name</option>
                            }
                        }
                    </select>
                </div>
            }
        </div>

        @if (Error)
        {
            <div class="row mt-3">
                <div class="col">
                    <a class="text-danger">Превышен лимит часов на месяц</a>
                </div>
            </div>
        }
    </Body>

    <Footer>
        <button class="btn btn-primary btn-sm" @onclick="Create">Добавить</button>
        <button class="btn btn-info btn-sm" @onclick="Close">Отмена</button>
    </Footer>

</CustomModalDialog>
@code {

    [Parameter]
    public EventCallback Action { get; set; }

    [Parameter]
    public Guid EmployeeId { get; set; }

    [Parameter]
    public DateTime CurrentDate { get; set; }

    [Parameter]
    public Guid StoreId { get; set; }

    [Parameter]
    public int LimitPlanHours { get; set; }

    [Parameter]
    public TimeSpan PlanHours { get; set; }

    [Inject]
    public ITimeKeeperDbContextFactory contextFactory { get; set; }

    [Inject]
    public IPlanService PlanService { get; set; }

    [Inject]
    public ILogger<CreatePlanDialogComponent> Logger { get; set; }

    private string invalidClass { get; set; } = string.Empty;

    private List<StoreEntity> allStories { get; set; }
    private List<TypeOverWorkEntity> typeWorks { get; set; } = new List<TypeOverWorkEntity>();
    private List<CustomTypeWorkEntity> customTypeWorks { get; set; } = new List<CustomTypeWorkEntity>();
    private DateTime begin { get; set; }
    private DateTime end { get; set; }
    private PlanType planType { get; set; } = PlanType.Plan;
    private Guid storeId { get; set; }
    private Guid typeOverWork { get; set; }
    private Guid customOverwork { get; set; }

    private CustomModalDialog modalDialog { get; set; } = new ();

    protected override async Task OnInitializedAsync()
    {
        var x = PlanHours.TotalHours;
        var y = LimitPlanHours;
    }

    private async Task Open()
    {
        Error = false;

        invalidClass = string.Empty;

        storeId = StoreId;
        begin = CurrentDate.Date.AddHours(8);
        end = CurrentDate.Date.AddHours(20);

        await modalDialog.Open();

        try
        {
            using var context = await contextFactory.Create();

            allStories = context.Stores.OrderBy(x => x.Name).ToList();
            typeWorks = await context.TypeOverWorks.OrderBy(x => x.Name).ToListAsync();
            customTypeWorks = context.CustomTypeWorks.OrderBy(x => x.Name).ToList();
            typeOverWork = typeWorks.FirstOrDefault().Id;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Ошибка пр открытии окна плана");
        }
    }

    private async Task Close()
    {
        await modalDialog.Close();
    }

    private bool Error { get; set; }

    private async Task Create()
    {
        try
        {
            var time = (end - begin).TotalHours;
            if (LimitPlanHours < (PlanHours.TotalHours + time))
            {
                Error = true;
                return;
            }

            Error = false;

            var resultCheckInterval = await PlanService.CheckPlan(EmployeeId, begin, end);

            if(resultCheckInterval == false)
            {
                invalidClass = "is-invalid";
                return;
            }

            invalidClass = string.Empty;

            Guid? customOverworkId = customOverwork == Guid.Empty ? null : customOverwork;
            await PlanService.Create(EmployeeId, planType, begin, end, storeId, typeOverWork, customOverworkId);
            await SyncEmployeeService.UpdateUser(EmployeeId);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Ошибка при создании плана");
        }

        try
        {
            if (Action.HasDelegate)
            {
                await Action.InvokeAsync();
                StateHasChanged();
            }
        }
        catch (Exception)
        {
            //ToDo - записать лог и отобразить сообщение
        }

        await modalDialog.Close();
    }
}
