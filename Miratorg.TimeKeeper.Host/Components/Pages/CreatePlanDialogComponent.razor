<CustomModalDialog DialogSize="ModalDialogSize.Large" @ref="modalDialog">

    <FrontObject>
        <button class="btn btn-primary btn-sm" @onclick="modalDialog.Open">Добавить план/подработку</button>
    </FrontObject>

    <Body>
        <div class="row">
            <div class="col-4">
                <label>Начало</label>
                <input class="form-control form-control-sm" type="datetime-local" name="name" @bind="begin" />
            </div>
            <div class="col-4">
                <label>Завершение</label>
                <input class="form-control form-control-sm" type="datetime-local" name="name" @bind="end" />
            </div>
            <div class="col-4">
                <label>Тип</label>
                <select class="form-select form-select-sm" name="name" @bind="planType" >
                    <option value="@PlanType.Plan">План</option>
                    <option value="@PlanType.Overwork">Подработка</option>
                </select>
            </div>
        </div>
    </Body>

    <Footer>
        <button class="btn btn-primary btn-sm" @onclick="Create">Добавить</button>
        <button class="btn btn-info btn-sm" @onclick="Close">Отмена</button>
    </Footer>

</CustomModalDialog>
@code {

    [Parameter]
    public EventCallback Action { get; set; }

    [Parameter]
    public Guid EmployeeId { get; set; }

    [Parameter]
    public DateTime CurrentDate { get; set; }

    [Inject]
    public IPlanService PlanService { get; set; }

    [Inject]
    public ILogger<CreatePlanDialogComponent> Logger { get; set; }

    private DateTime begin { get; set; } = DateTime.Now.Date.AddHours(8);
    private DateTime end { get; set; } = DateTime.Now.Date.AddHours(20);
    private PlanType planType { get; set; } = PlanType.Plan;

    private CustomModalDialog modalDialog { get; set; } = new ();

    private async Task Close()
    {
        await modalDialog.Close();
    }

    private async Task Create()
    {
        try
        {
            await PlanService.Create(EmployeeId, planType, begin, end);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Ошибка при создании плана");
        }

        if (!Action.HasDelegate)
        {
            return;
        }

        try
        {
            await Action.InvokeAsync();
        }
        catch (Exception)
        {
            //ToDo - записать лог и отобразить сообщение
        }

        await modalDialog.Close();
    }
}
