@attribute [RouteAttribute(RoutePages.HOME)]
@rendermode InteractiveServer

<div class="row mt-4 mb-3 align-items-end">
    <div class="col-3">
        <label class="">Магазин</label>
        <select class="form-select form-select-sm" value="@_selectedStore" @onchange="HandleSelectionTypeChange">
            <option value="@Guid.Empty">Выберете магазин</option>
            @foreach (var store in allStories)
            {
                <option value="@store.Id">@store.Name</option>
            }
        </select>
    </div>
    <div class="col-2">
        <label class="">Период</label>
        <input class="form-control form-control-sm" @bind-value="_date" @bind-value:event="oninput" @onchange="HandleOnChange" type="month" />
    </div>
    <div class="col-7">
        <div style="display:flex; flex-direction: row; ">
            @foreach (var weekStart in weekStarts)
            {
                <div style="display:flex; margin-right: 5px;">
                    <button class="btn btn-info btn-sm" @onclick="(() => SelectWeek(weekStart))">@weekStart.ToShortDateString()</button>
                </div>
            }
        </div>
    </div>
</div>

<div style="display: flex; flex-direction: row" class="mb-3">

    <div class="form-check form-switch me-2">
        <input type="checkbox" class="form-check-input" id="customSwitch1" style="margin-right: 10px; " @bind="_isShowPlan">
        <label class="form-check-label" for="customSwitch1" style="flex-grow: 1; background-color: #2c8ef8; padding: 5px 10px; border-radius: 5px;">Запланированный график</label>
    </div>
    <div class="form-check form-switch me-2">
        <input type="checkbox" class="form-check-input" id="customSwitch1" style="margin-right: 10px; " @bind="_isShowOverWork">
        <label class="form-check-label" for="customSwitch1" style="flex-grow: 1; background-color: #2c8ef8; padding: 5px 10px; border-radius: 5px;">Подработки</label>
    </div>
    <div class="form-check form-switch me-2">
        <input type="checkbox" class="form-check-input" id="customSwitch1" style="margin-right: 10px; " @bind="_isShow1C">
        <label class="form-check-label" for="customSwitch1" style="flex-grow: 1; background-color: #0acf97; padding: 5px 10px; border-radius: 5px;">Отображать график 1C</label>
    </div>
    <div class="form-check form-switch me-2">
        <input type="checkbox" class="form-check-input" id="customSwitch1" style="margin-right: 10px; " @bind="_isShowScud">
        <label class="form-check-label" for="customSwitch1" style="flex-grow: 1; background-color: #ffc35a; padding: 5px 10px; border-radius: 5px;">Фактическое время</label>
    </div>
    <div class="form-check form-switch me-2">
        <input type="checkbox" class="form-check-input" id="customSwitch1" style="margin-right: 10px; ">
        <label class="form-check-label" for="customSwitch1" style="flex-grow: 1; background-color: #ffc35a; padding: 5px 10px; border-radius: 5px;">Фактические переработки</label>
    </div>

</div>

<table>
    <tr>
        <td>Сотрудники</td>
        <td>NavCode</td>

        <td><DayHeader WeekDay="DayEnum.Monday" WeekBeginDay="_selectedWeekBeginDay"/></td>
        <td><DayHeader WeekDay="DayEnum.Tuesday" WeekBeginDay="_selectedWeekBeginDay" /></td>
        <td><DayHeader WeekDay="DayEnum.Wednesday" WeekBeginDay="_selectedWeekBeginDay" /></td>
        <td><DayHeader WeekDay="DayEnum.Thursday" WeekBeginDay="_selectedWeekBeginDay" /></td>
        <td><DayHeader WeekDay="DayEnum.Friday" WeekBeginDay="_selectedWeekBeginDay" /></td>
        <td><DayHeader WeekDay="DayEnum.Saturday" WeekBeginDay="_selectedWeekBeginDay" /></td>
        <td><DayHeader WeekDay="DayEnum.Sunday" WeekBeginDay="_selectedWeekBeginDay" /></td>
    </tr>

    @if (employees != null)
    {
        @foreach (var employee in employees)
        {
            <tr>
                <td>
                    <div style="display:flex; flex-direction:column">
                        <b>
                            @employee.Name
                        </b>
                        <a>
                            @employee.Position
                        </a>
                    </div>
                </td>
                <td>@employee.CodeNav</td>

                <td><PlanDayComponent StoreId="_selectedStore" AdditionalEmployeeModels="additionalEmployees" Action="UpdateDates" IsShowPlan="_isShowPlan" IsShowOverWork="_isShowOverWork" IsShow1C="_isShow1C" IsShowScud="_isShowScud" WeekDay="DayEnum.Monday" WeekBeginDay="_selectedWeekBeginDay" EmployeeId="employee.Id" /></td>
                <td><PlanDayComponent StoreId="_selectedStore" AdditionalEmployeeModels="additionalEmployees" Action="UpdateDates" IsShowPlan="_isShowPlan" IsShowOverWork="_isShowOverWork" IsShow1C="_isShow1C" IsShowScud="_isShowScud" WeekDay="DayEnum.Tuesday" WeekBeginDay="_selectedWeekBeginDay" EmployeeId="employee.Id" /></td>
                <td><PlanDayComponent StoreId="_selectedStore" AdditionalEmployeeModels="additionalEmployees" Action="UpdateDates" IsShowPlan="_isShowPlan" IsShowOverWork="_isShowOverWork" IsShow1C="_isShow1C" IsShowScud="_isShowScud" WeekDay="DayEnum.Wednesday" WeekBeginDay="_selectedWeekBeginDay" EmployeeId="employee.Id" /></td>
                <td><PlanDayComponent StoreId="_selectedStore" AdditionalEmployeeModels="additionalEmployees" Action="UpdateDates" IsShowPlan="_isShowPlan" IsShowOverWork="_isShowOverWork" IsShow1C="_isShow1C" IsShowScud="_isShowScud" WeekDay="DayEnum.Thursday" WeekBeginDay="_selectedWeekBeginDay" EmployeeId="employee.Id" /></td>
                <td><PlanDayComponent StoreId="_selectedStore" AdditionalEmployeeModels="additionalEmployees" Action="UpdateDates" IsShowPlan="_isShowPlan" IsShowOverWork="_isShowOverWork" IsShow1C="_isShow1C" IsShowScud="_isShowScud" WeekDay="DayEnum.Friday" WeekBeginDay="_selectedWeekBeginDay" EmployeeId="employee.Id" /></td>
                <td><PlanDayComponent StoreId="_selectedStore" AdditionalEmployeeModels="additionalEmployees" Action="UpdateDates" IsShowPlan="_isShowPlan" IsShowOverWork="_isShowOverWork" IsShow1C="_isShow1C" IsShowScud="_isShowScud" WeekDay="DayEnum.Saturday" WeekBeginDay="_selectedWeekBeginDay" EmployeeId="employee.Id" /></td>
                <td><PlanDayComponent StoreId="_selectedStore" AdditionalEmployeeModels="additionalEmployees" Action="UpdateDates" IsShowPlan="_isShowPlan" IsShowOverWork="_isShowOverWork" IsShow1C="_isShow1C" IsShowScud="_isShowScud" WeekDay="DayEnum.Sunday" WeekBeginDay="_selectedWeekBeginDay" EmployeeId="employee.Id" /></td>
            </tr>
        }
    }

</table>

@code {

    [Inject]
    public ITimeKeeperDbContextFactory contextFactory { get; set; }

    [Inject]
    public IPlanService planService { get; set; }

    private Guid _selectedStore { get; set; }
    private DateTime _date { get; set; } = DateTime.Now;
    private DateTime _selectedWeekBeginDay { get; set; }
    private List<DateTime> weekStarts { get; set; } = new List<DateTime>();

    private bool _isShowPlan { get; set; }
    private bool _isShowOverWork{ get; set; }
    private bool _isShow1C { get; set; }
    private bool _isShowScud { get; set; }

    protected override async Task OnInitializedAsync()
    {
        UpdateDates();
        await Load();
    }

    // private List<EmployeeEntity> allEmployees { get; set; }
    private List<StoreEntity> allStories { get; set; } = new List<StoreEntity>();

    private List<EmployeeModel> employees { get; set; } = new List<EmployeeModel>();
    // private List<EmployeeModel> employeeModels { get; set; } = new List<EmployeeModel>();
    private List<EmployeeModel> additionalEmployees { get; set; } = new List<EmployeeModel>();

    private void HandleOnChange(ChangeEventArgs e)
    {
        UpdateDates();
    }

    private async void UpdateDates()
    {
        weekStarts.Clear();
        weekStarts = GetFirstDaysOfWeeksInMonth(_date);
        _selectedWeekBeginDay = weekStarts.FirstOrDefault();

        var begin = weekStarts.Min();
        var end = weekStarts.Max();

        await SelectStory(_selectedStore);
        StateHasChanged();
    }

    private void SelectWeek(DateTime date)
    {
        _selectedWeekBeginDay = date;

        StateHasChanged();
    }

    public static List<DateTime> GetFirstDaysOfWeeksInMonth(DateTime date)
    {
        List<DateTime> firstDaysOfWeeks = new List<DateTime>();

        // Установка даты на первый день месяца
        DateTime firstDayOfMonth = new DateTime(date.Year, date.Month, 1);

        // Вычисление первого понедельника месяца или последнего понедельника предыдущего месяца
        int daysOffset = ((int)DayOfWeek.Monday - (int)firstDayOfMonth.DayOfWeek + 7) % 7;
        DateTime firstMonday = firstDayOfMonth.AddDays(daysOffset - 7);  // Вычитаем 7, чтобы получить понедельник предыдущей недели

        // Добавление всех понедельников месяца в список, начиная с последнего понедельника предыдущего месяца
        DateTime currentMonday = firstMonday;
        while (currentMonday.Month <= date.Month)
        {
            if (currentMonday.Month == date.Month || currentMonday.AddDays(6).Month == date.Month)
            {
                firstDaysOfWeeks.Add(currentMonday);
            }
            currentMonday = currentMonday.AddDays(7);
        }

        return firstDaysOfWeeks;
    }

    private async Task SelectStory(Guid storeId)
    {
        employees = SyncEmployeeService.Employees.Where(x => x.StoreId == storeId).ToList();

        var xxx = SyncEmployeeService.Employees.Where(x => x.StoreId != storeId).ToList();

        List<EmployeeModel> additionals = new List<EmployeeModel>();

        foreach (var item in xxx)
        {
            var testData = item.Plans.Where(x => x.PlanType == PlanType.Overwork && x.StoreId == storeId);

            if (testData.Count() == 0)
            {
                continue;
            }

            var empl = new EmployeeModel()
                {
                    Id = item.Id,
                    StoreId = item.StoreId,
                    Plans = new List<PlanDetailModel>(),
                    ScudInfos = new List<ScudInfoModel>(),
                    WorkDates = new List<Schedule1CPlanModel>()
                };

            foreach (var plan in testData)
            {
                empl.Plans.Add(new PlanDetailModel()
                    {
                        Begin = plan.Begin,
                        End = plan.End,
                        PlanType = plan.PlanType,
                        Id = plan.Id,
                        StoreId = plan.StoreId
                    });
            }

            additionals.Add(empl);
        }

        additionalEmployees = additionals;
    }

    private async void HandleSelectionTypeChange(ChangeEventArgs e)
    {
        if (Guid.TryParse(e.Value.ToString(), out Guid id))
        {
            _selectedStore = id;
            await SelectStory(id);
        }
    }

    private async Task Load()
    {
        try
        {
            using var context = await contextFactory.Create();

            // allEmployees = context.Employees.Include(x => x.Schedule).ThenInclude(x => x.Dates).ToList();
            allStories = context.Stores.OrderBy(x => x.Name).ToList();

            await SelectStory(Guid.Empty);
        }
        catch(Exception ex)
        {
            
        }
    }
}
