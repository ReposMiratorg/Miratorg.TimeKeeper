@attribute [RouteAttribute(RoutePages.HOME)]
@rendermode InteractiveServer

<div class="row mt-4 mb-3 align-items-end">
    <div class="col-3">
        <label class="">Магазин</label>
        <input type="text" class="form-control form-control-sm" placeholder="Введите для фильтрации..." @bind="@filterText" @oninput="@FilterChanged" @onfocus="OnFockus" />

        <div class="dropdown-menu @(isShowList == true ? "show" : "")" style="max-height: 300px; max-width: 400px; overflow-y: auto; list-style-type: none; ">
            <ul class="dropdown-item list-group-item" style="list-style-type: none; padding: 0; margin: 0; cursor: pointer;">
                @foreach (var item in filteredItems)
                {
                    <li><a class="dropdown-item" @onclick="@(() => SelectItem(item.Id, item.Name))">@item.Name</a></li>
                }
            </ul>
        </div>
    </div>
    <div class="col-1">
        <label class="">Период</label>
        <input class="form-control form-control-sm" @bind-value="_date" @bind-value:event="oninput" @onchange="HandleOnChange" type="month" />
    </div>
    <div class="col-1 ">
        <label class="form-label">Вид</label>
        <select class="form-control form-control-sm" @bind="periodMode">
            <option value="@PeriodMode.Week">Неделя</option>
            <option value="@PeriodMode.Month">Месяц</option>
        </select>
    </div>
    <div class="col-4">
        @if (periodMode == PeriodMode.Week)
        {
            <div style="display:flex; flex-direction: row; ">
                @foreach (var weekStart in weekStarts)
                {
                    <div style="display:flex; margin-right: 5px;">
                        <button class="btn @(weekStart == _selectedWeekBeginDay ? "btn-primary" : "btn-secondary") btn-sm" @onclick="(() => SelectWeek(weekStart))">@weekStart.ToString("dd.MM.yyyy")</button>
                    </div>
                }
            </div>
        }
    </div>
    <div class="col-1">
        @if (_selectedStore != Guid.Empty)
        {
            <labe>Лимит на месяц</labe>
            <input class="form-control form-control-sm @limitColor" @bind="totalPlanMessage" disabled />
        }
    </div>
    <div class="col-1">
        @if (_selectedStore != Guid.Empty)
        {
            <labe>Факт</labe>
            <input class="form-control form-control-sm" @bind="totalFactMessage" disabled />
        }
    </div>
</div>

<div style="display: flex; flex-direction: row" class="mb-3">

    <div class="form-check form-switch me-2">
        <input type="checkbox" class="form-check-input" id="customSwitch1" style="margin-right: 10px; " @bind="_isShowPlan">
        <label class="form-check-label" for="customSwitch1" style="flex-grow: 1; background-color: @ColorConfig.BackgroundPlan; padding: 5px 10px; border-radius: 5px;">Запланированный график</label>
    </div>
    <div class="form-check form-switch me-2">
        <input type="checkbox" class="form-check-input" id="customSwitch2" style="margin-right: 10px; " @bind="_isShowOverWork">
        <label class="form-check-label" for="customSwitch2" style="flex-grow: 1; background-color: @ColorConfig.BackgroundOverWork; padding: 5px 10px; border-radius: 5px;">Подработки</label>
    </div>
    <div class="form-check form-switch me-2">
        <input type="checkbox" class="form-check-input" id="customSwitch3" style="margin-right: 10px; " @bind="_isShow1C">
        <label class="form-check-label" for="customSwitch3" style="flex-grow: 1; background-color: @ColorConfig.Background1C; padding: 5px 10px; border-radius: 5px;">Отображать график 1C</label>
    </div>
    <div class="form-check form-switch me-0">
        <input type="checkbox" class="form-check-input" id="customSwitch4" style="margin-right: 10px; " @bind="_isShowScud">
        <label class="form-check-label" for="customSwitch4" style="flex-grow: 1; background-color: @ColorConfig.BackgroundScud; padding: 5px 10px; border-radius: 5px;">Фактическое время</label>
    </div>
    <div class="form-check form-switch me-2">
        @* <input type="checkbox" class="form-check-input" id="customSwitch5" style="margin-right: 10px; "> *@
        <label class="form-check-label" for="customSwitch5" style="flex-grow: 1; background-color: @ColorConfig.BackgroundFActOverWork; padding: 5px 10px; border-radius: 5px;">Фактические переработки</label>
    </div>
    <div class="form-check form-switch me-2">
        <input type="checkbox" class="form-check-input" id="customSwitch7" style="margin-right: 10px; " @bind="_isShowReasonAbcent">
        <label class="form-check-label" for="customSwitch7" style="flex-grow: 1; background-color: @ColorConfig.BackgroundReasonAbsent; padding: 5px 10px; border-radius: 5px;">Причины отсутствия</label>
    </div>

    <div class="ms-5">
        <button class="btn btn-sm btn-primary" @onclick="ResetOn">сброс</button>
    </div>

</div>

<div style=" overflow-x: auto;">
    <table>
        <thead>
            <tr>
                <td class="col-3">Сотрудники</td>
                <td>Время</td>
                @if (periodMode == PeriodMode.Week)
                {
                    <td><DayHeader WeekDay="DayEnum.Monday" CurrentDate="_selectedWeekBeginDay" /></td>
                    <td><DayHeader WeekDay="DayEnum.Tuesday" CurrentDate="_selectedWeekBeginDay.AddDays(1)" /></td>
                    <td><DayHeader WeekDay="DayEnum.Wednesday" CurrentDate="_selectedWeekBeginDay.AddDays(2)" /></td>
                    <td><DayHeader WeekDay="DayEnum.Thursday" CurrentDate="_selectedWeekBeginDay.AddDays(3)" /></td>
                    <td><DayHeader WeekDay="DayEnum.Friday" CurrentDate="_selectedWeekBeginDay.AddDays(4)" /></td>
                    <td><DayHeader WeekDay="DayEnum.Saturday" CurrentDate="_selectedWeekBeginDay.AddDays(5)" /></td>
                    <td><DayHeader WeekDay="DayEnum.Sunday" CurrentDate="_selectedWeekBeginDay.AddDays(6)" /></td>
                }
                else
                {
                    var s = GetFirstDay(_date);
                    var s_max = s.AddMonths(1);

                    for (var i = s; i < s_max; i = i.AddDays(1))
                    {
                        var weekDay = Helpers.WeekConverter.Convert(i);
                        <td><DayHeader WeekDay="weekDay" CurrentDate="i" /></td>
                    }
                }
            </tr>
        </thead>

        <tbody>
            @if (additionalEmployees != null)
            {
                @foreach (var employee in additionalEmployees)
                {
                    <tr>
                        <td>
                            <div style="display:flex; flex-direction:column">
                                <b>
                                    @employee.Name
                                </b>
                                <a>
                                    @employee.Position
                                </a>
                            </div>
                        </td>
                        <td>
                            @{
                                // var x = GetFirstDay(_date);
                                // var time = employee.MountHours[x];
                                // <div class="text-center">
                                //     <a class="text-center">@time.ToString("0")</a>
                                // </div>
                            }
                        </td>

                        @if (periodMode == PeriodMode.Week)
                        {
                            for (int i = 0; i < 7; i++)
                            {
                                var currentDate = _selectedWeekBeginDay.AddDays(i);
                                <td><OtherPlanRecordComponent StoreId="_selectedStore" AdditionalEmployeeModels="additionalEmployees" Action="UpdateDates" IsShowOverWork="true" IsShow1C="_isShow1C" IsShowScud="true" IsShowReasonAbsent="true" Day="currentDate" EmployeeId="employee.Id" /></td>
                            }
                        }
                        else
                        {
                            var s = GetFirstDay(_date);

                            for (var i = s; i < s.AddMonths(1); i = i.AddDays(1))
                            {
                                <td><OtherPlanRecordComponent StoreId="_selectedStore" AdditionalEmployeeModels="additionalEmployees" Action="UpdateDates" IsShowOverWork="true" IsShow1C="_isShow1C" IsShowScud="true" IsShowReasonAbsent="true" Day="i" EmployeeId="employee.Id" /></td>
                            }
                        }

                    </tr>
                }
            }

            @if (employees != null)
            {
                @foreach (var employee in employees)
                {
                    <tr>
                        <td>
                            <div style="display:flex; flex-direction:column">
                                <b>
                                    @employee.Name
                                </b>
                                <a>
                                    @employee.Position
                                </a>
                            </div>
                        </td>
                        <td>
                            @{
                                var x = GetFirstDay(_date);
                                var time = employee.MountPlanUseHours[x];
                                <div class="text-center">
                                    <a class="text-center">@time.ToString("0")</a>
                                </div>
                            }
                        </td>

                        @if (periodMode == PeriodMode.Week)
                        {
                            for (int i = 0; i < 7; i++)
                            {
                                var currentDate = _selectedWeekBeginDay.AddDays(i);
                                <td><PlanDayComponent LimitPlanHours="limitPlanHours" PlanHours="planHours" StoreId="_selectedStore" AdditionalEmployeeModels="additionalEmployees" Action="UpdateDates" IsShowPlan="_isShowPlan" IsShowOverWork="_isShowOverWork" IsShow1C="_isShow1C" IsShowScud="_isShowScud" IsShowReasonAbsent="_isShowReasonAbcent" Day="currentDate" EmployeeId="employee.Id" /></td>
                            }
                        }
                        else
                        {
                            var s = GetFirstDay(_date);

                            for (var i = s; i < s.AddMonths(1); i = i.AddDays(1))
                            {
                                <td><PlanDayComponent LimitPlanHours="limitPlanHours" PlanHours="planHours" StoreId="_selectedStore" AdditionalEmployeeModels="additionalEmployees" Action="UpdateDates" IsShowPlan="_isShowPlan" IsShowOverWork="_isShowOverWork" IsShow1C="_isShow1C" IsShowScud="_isShowScud" IsShowReasonAbsent="_isShowReasonAbcent" Day="i" EmployeeId="employee.Id" /></td>
                            }
                        }

                    </tr>
                }

                @if (_selectedStore != Guid.Empty)
                {
                    <tr>
                        <td><b>Итого часов: @totalPlanMessage</b></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                    </tr>
                }
            }
        </tbody>

    </table>
</div>


@code {

    [Inject]
    public ITimeKeeperDbContextFactory contextFactory { get; set; }

    [Inject]
    public IPlanService planService { get; set; }

    private Guid _selectedStore { get; set; }
    private DateTime _date { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
    private DateTime _selectedWeekBeginDay { get; set; }
    private List<DateTime> weekStarts { get; set; } = new List<DateTime>();

    private bool _isShowPlan { get; set; } = true;
    private bool _isShowOverWork { get; set; } = true;
    private bool _isShow1C { get; set; }
    private bool _isShowScud { get; set; } = true;
    private bool _isShowReasonAbcent { get; set; } = true;

    private PeriodMode periodMode { get; set; } = PeriodMode.Week;

    private string totalPlanMessage { get; set; }
    private string totalFactMessage { get; set; }

    private bool isShowList { get; set; } = false;
    private string filterText { get; set; } = string.Empty;

    private void ResetOn()
    {
        var result = _isShowPlan || _isShowOverWork || _isShow1C || _isShowScud;

        if (result)
        {
            _isShowPlan = false;
            _isShowOverWork = false;
            _isShow1C = false;
            _isShowScud = false;
            _isShowReasonAbcent = false;
        }
        else
        {
            _isShowPlan = true;
            _isShowOverWork = true;
            _isShow1C = true;
            _isShowScud = true;
            _isShowReasonAbcent = true;
        }

        StateHasChanged();
    }

    private void OnFockus()
    {
        isShowList = true;
    }

    private void SelectItem(Guid itemId, string text)
    {
        _selectedStore = itemId;
        filterText = text;

        isShowList = false;

        SelectStory(_selectedStore);
    }

    private void FilterChanged(ChangeEventArgs e)
    {
        isShowList = true;
        filterText = e.Value.ToString();
        filteredItems = allStories.Where(x => x.Name.ToLower().Contains(filterText.ToLower())).ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        UpdateDates();
        await Load();

        filteredItems = allStories;
    }

    private List<StoreEntity> allStories { get; set; } = new List<StoreEntity>();
    private List<StoreEntity> filteredItems { get; set; } = new List<StoreEntity>();
    private List<EmployeeModel> employees { get; set; } = new List<EmployeeModel>();
    private List<EmployeeModel> additionalEmployees { get; set; } = new List<EmployeeModel>();

    private void HandleOnChange(ChangeEventArgs e)
    {
        UpdateDates();
    }

    private void UpdateDates()
    {
        weekStarts.Clear();
        weekStarts = GetFirstDaysOfWeeksInMonth(_date);
        _selectedWeekBeginDay = weekStarts.FirstOrDefault();

        var begin = weekStarts.Min();
        var end = weekStarts.Max();

        SelectStory(_selectedStore);
        StateHasChanged();
    }

    private void SelectWeek(DateTime date)
    {
        _selectedWeekBeginDay = date;

        StateHasChanged();
    }

    public static DateTime GetFirstDay(DateTime date)
    {
        DateTime firstDayOfMonth = new DateTime(date.Year, date.Month, 1);
        return firstDayOfMonth;
    }

    public static List<DateTime> GetFirstDaysOfWeeksInMonth(DateTime date)
    {
        List<DateTime> firstDaysOfWeeks = new List<DateTime>();

        // Установка даты на первый день месяца
        DateTime firstDayOfMonth = new DateTime(date.Year, date.Month, 1);

        // Вычисление первого понедельника месяца или последнего понедельника предыдущего месяца
        int daysOffset = ((int)DayOfWeek.Monday - (int)firstDayOfMonth.DayOfWeek + 7) % 7;
        DateTime firstMonday = firstDayOfMonth.AddDays(daysOffset - 7);  // Вычитаем 7, чтобы получить понедельник предыдущей недели

        // Добавление всех понедельников месяца в список, начиная с последнего понедельника предыдущего месяца
        DateTime currentMonday = firstMonday;
        while (currentMonday.Month <= date.Month)
        {
            if (currentMonday.Month == date.Month || currentMonday.AddDays(6).Month == date.Month)
            {
                firstDaysOfWeeks.Add(currentMonday);
            }
            currentMonday = currentMonday.AddDays(7);
        }

        return firstDaysOfWeeks;
    }

    private void SelectStory(Guid storeId)
    {
        planHours = new TimeSpan();
        factHours = new TimeSpan();
        limitPlanHours = 0;
        limitColor = string.Empty;

        var store = allStories.FirstOrDefault(x => x.Id == storeId);
        employees = SyncEmployeeService.Employees.Where(x => x.StoreId == storeId).ToList();

        var date = GetFirstDay(_date);

        var xxx = SyncEmployeeService.Employees.Where(x => x.StoreId != storeId).ToList();

        List<EmployeeModel> additionals = new List<EmployeeModel>();

        foreach (var item in xxx)
        {
            var testData = item.Plans.Where(x => x.PlanType == PlanType.Overwork && x.StoreId == storeId).ToList();

            if (testData.Count() == 0)
            {
                continue;
            }

            var empl = new EmployeeModel()
                {
                    Id = item.Id,
                    Name = item.Name,
                    StoreId = item.StoreId,
                    Plans = new List<PlanDetailModel>(),
                    ScudInfos = new List<ScudInfoModel>(),
                    WorkDates = new List<Schedule1CPlanModel>(),
                    MountPlanUseHours = new Dictionary<DateTime, double>()
                };

            foreach (var planOverwork in testData)
            {
                empl.Plans.Add(new PlanDetailModel()
                    {
                        Begin = planOverwork.Begin,
                        End = planOverwork.End,
                        PlanType = planOverwork.PlanType,
                        Id = planOverwork.Id,
                        StoreId = planOverwork.StoreId
                    });
            }

            additionals.Add(empl);
        }

        additionalEmployees = additionals;

        if (employees != null)
        {
            foreach (var empl in employees)
            {
                if (empl.MountPlanUseHours.TryGetValue(date, out var time))
                {
                    planHours += TimeSpan.FromHours(time);
                }

                if(empl.ScudInfos != null)
                {
                    foreach(var scudInfo in empl.ScudInfos)
                    {
                        factHours += (scudInfo.End - scudInfo.Begin);
                    }
                }
            }
        }

        limitPlanHours = store?.Limits?.FirstOrDefault(x => x.Year == date.Year && x.Mouth == (date.Month - 1))?.Limit ?? 0;

        totalPlanMessage = $"{planHours.TotalHours.ToString("0")} из {(limitPlanHours.ToString("0") ?? "0")}";
        totalFactMessage = $"{factHours.ToString(@"hh\:mm")}";
        var checkPlan = planHours.TotalHours * 1.1;
        limitColor = checkPlan >= limitPlanHours ? "text-danger" : "";
    }

    private TimeSpan planHours { get; set; } = new TimeSpan();
    private TimeSpan factHours { get; set; } = new TimeSpan();
    private int limitPlanHours { get; set; } = 0;
    private string limitColor { get; set; } = string.Empty;

    private void HandleSelectionTypeChange(ChangeEventArgs e)
    {
        if (Guid.TryParse(e.Value.ToString(), out Guid id))
        {
            _selectedStore = id;
            SelectStory(id);
        }
    }

    private async Task Load()
    {
        try
        {
            using var context = await contextFactory.Create();

            allStories = context.Stores.Include(x => x.Limits).OrderBy(x => x.Name).ToList();

            SelectStory(Guid.Empty);
        }
        catch (Exception ex)
        {

        }
    }
}
